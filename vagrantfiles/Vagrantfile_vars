# Variables

# $box_image must be set in each Vagrantfile set.

# Disk setup
DISK_COUNT = ENV['DISK_COUNT'].to_s.strip.empty? ? 2 : ENV['DISK_COUNT'].to_i
DISK_SIZE_GB = ENV['DISK_SIZE_GB'].to_s.strip.empty? ? 20 : ENV['DISK_SIZE_GB'].to_i

# Resources
MASTER_CPUS = ENV['MASTER_CPUS'].to_s.strip.empty? ? 2 : ENV['MASTER_CPUS'].to_i
MASTER_MEMORY_SIZE_GB = ENV['MASTER_MEMORY_SIZE_GB'].to_s.strip.empty? ? 2 : ENV['MASTER_MEMORY_SIZE_GB'].to_i
NODE_CPUS = ENV['NODE_CPUS'].to_s.strip.empty? ? 2 : ENV['NODE_CPUS'].to_i
NODE_MEMORY_SIZE_GB = ENV['NODE_MEMORY_SIZE_GB'].to_s.strip.empty? ? 2 : ENV['NODE_MEMORY_SIZE_GB'].to_i

# BOX_OS specific fixes
## Currently only used by ubuntu
$docker_version = ''

# Libvirt specific config
LIBVIRT_STORAGE_POOL = ENV['LIBVIRT_STORAGE_POOL'].to_s.strip.empty? ? 'default' : ENV['LIBVIRT_STORAGE_POOL']

# Network
MASTER_IP = ENV['MASTER_IP'].to_s.strip.empty? ? '192.168.26.10' : ENV['MASTER_IP']
POD_NW_CIDR = ENV['POD_NW_CIDR'].to_s.strip.empty? ? '10.244.0.0/16' : ENV['POD_NW_CIDR']
NODE_IP_NW = ENV['NODE_IP_NW'].to_s.strip.empty? ? '192.168.26.' : ENV['NODE_IP_NW']
NODE_IP = NODE_IP_NW + (NODE + MASTER_IP.split(".").last.to_i).to_s

$userSSHPubKey = ENV['USER_SSHPUBKEY'].to_s.strip.empty? ? '' : ENV['USER_SSHPUBKEY']

# Addons
## Kubernetes Dashboard
K8S_DASHBOARD = ENV['K8S_DASHBOARD'].to_s.strip.empty? ? false : ENV['K8S_DASHBOARD'].downcase == 'true'
K8S_DASHBOARD_VERSION = ENV['K8S_DASHBOARD_VERSION'].to_s.strip.empty? ? 'v1.10.1' : ENV['K8S_DASHBOARD_VERSION']
## kube-web-view
KUBE_WEB_VIEW = ENV['KUBE_WEB_VIEW'].to_s.strip.empty? ? false : ENV['KUBE_WEB_VIEW'].downcase == 'true'

# Kubernetes and kubeadm
CLUSTER_NAME = ENV['CLUSTER_NAME'].to_s.strip.empty? ? 'k8s-vagrant-multi-node' : ENV['CLUSTER_NAME']
KUBERNETES_VERSION = ENV['KUBERNETES_VERSION'].to_s.strip.empty? ? '' : ENV['KUBERNETES_VERSION']
$kubernetes_pkg_version_suffix = ENV['KUBERNETES_PKG_VERSION_SUFFIX'].to_s.strip.empty? ? '' : ENV['KUBERNETES_PKG_VERSION_SUFFIX']
$kubeadm_init_flags = ENV['KUBEADM_INIT_FLAGS'].to_s.strip.empty? ? '' : ENV['KUBEADM_INIT_FLAGS']
$kubeadm_join_flags = ENV['KUBEADM_JOIN_FLAGS'].to_s.strip.empty? ? '' : ENV['KUBEADM_JOIN_FLAGS']
if KUBERNETES_VERSION != '' && $kubeadm_init_flags == ''
    $kubeadm_init_flags = "--kubernetes-version=#{KUBERNETES_VERSION}"
end

$kube_network = ENV['KUBE_NETWORK'].to_s.strip.empty? ? 'calico' : ENV['KUBE_NETWORK'].downcase

KUBE_PROXY_IPVS = ENV['KUBE_PROXY_IPVS'].to_s.strip.empty? ? false : ENV['KUBE_PROXY_IPVS'].downcase == 'true'

HTTP_PROXY = ENV['HTTP_PROXY'].to_s.strip.empty? ? '' : ENV['HTTP_PROXY']
HTTPS_PROXY = ENV['HTTPS_PROXY'].to_s.strip.empty? ? '' : ENV['HTTPS_PROXY']
HTTP_PROXY_USERNAME = ENV['HTTP_PROXY_USERNAME'].to_s.strip.empty? ? '' : ENV['HTTP_PROXY_USERNAME']
HTTP_PROXY_PASSWORD = ENV['HTTP_PROXY_PASSWORD'].to_s.strip.empty? ? '' : ENV['HTTP_PROXY_PASSWORD']
NO_PROXY = ENV['NO_PROXY'].to_s.strip.empty? ? '' : ENV['NO_PROXY']

INSTALL_ADDITIONAL_PACKAGES = ENV['INSTALL_ADDITIONAL_PACKAGES'].to_s.strip.empty? ? '' : ENV['INSTALL_ADDITIONAL_PACKAGES']

NETWORK_VM_MTU = ENV['NETWORK_VM_MTU'].to_s.strip.empty? ? 1500 : ENV['NETWORK_VM_MTU'].to_i
KUBE_NETWORK_MTU = ENV['KUBE_NETWORK_MTU'].to_s.strip.empty? ? 1450 : ENV['KUBE_NETWORK_MTU'].to_i

# Generate new using steps in README
KUBETOKEN = ENV['KUBETOKEN'] || 'b029ee.968a33e8d8e6bb0d'

$kubeletExtraArgsFile = '/etc/sysconfig/kubelet'

# The controller name is different per OS it seems (this is the case for at least Ubuntu right now).
# For more information, see https://github.com/kusnier/vagrant-persistent-storage/issues/33.
$storagecontroller = 'k8svmSATAController'
$storagecontrollerneedstobecreated = true
