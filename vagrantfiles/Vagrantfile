require File.expand_path('../vagrant-provision-disk-and-reboot-plugin.rb', __FILE__)

# Node ID if it is a node
NODE = ENV['NODE'].to_s.strip.empty? ? 0 : ENV['NODE'].to_i

# Vagrantfile provider to use
VAGRANT_DEFAULT_PROVIDER = ENV['VAGRANT_DEFAULT_PROVIDER'].to_s.strip.empty? ? 'virtualbox'.freeze : ENV['VAGRANT_DEFAULT_PROVIDER']

# Vagrantfile OS set to use
BOX_OS = ENV['BOX_OS'].to_s.strip.empty? ? 'fedora'.freeze : ENV['BOX_OS']

# Load the Vagrantfile_vars file
$vagrantfilevars = File.expand_path('../Vagrantfile_vars', __FILE__)
load $vagrantfilevars

# Load the common os file if it exists
$oscommonvarsfile = File.expand_path("../#{BOX_OS}/common", __FILE__)
load $oscommonvarsfile if File.exist?($oscommonvarsfile)

# After all variables are loaded and per BOX_OS vars are overriden, load scripts
# Load the `Vagrantfile_scripts` file
if BOX_OS == 'prolinux'
$vagrantfilescripts = File.expand_path('../Vagrantfile_scripts_prolinux', __FILE__)
else
$vagrantfilescripts = File.expand_path('../Vagrantfile_scripts', __FILE__)
end
load $vagrantfilescripts

# Load the type specific variables (e.g., master, node) (0 is equal to not a node)
if NODE == 0
    $osvariablefile = "../#{BOX_OS}/master"
    $hostname = 'master'
    $vmip = MASTER_IP
    $vmCPUs = MASTER_CPUS
    $vmMemory = MASTER_MEMORY_SIZE_GB * 1024
else
    $osvariablefile = "../#{BOX_OS}/node"
    $hostname = "node#{NODE}"
    $vmip = NODE_IP
    $vmCPUs = NODE_CPUS
    $vmMemory = NODE_MEMORY_SIZE_GB * 1024
end
$osvariablefile = File.expand_path($osvariablefile, __FILE__)
load $osvariablefile

Vagrant.configure('2') do |config|
    config.vm.box = $box_image
    config.vm.box_check_update = true

    config.vm.boot_timeout = 900

    config.vm.provider VAGRANT_DEFAULT_PROVIDER do |l|
        # Configure resources
        l.cpus = $vmCPUs
        l.memory = $vmMemory
        # Add disks for libvirt here as no (workaround) plugin is needed as for Virtualbox
        if VAGRANT_DEFAULT_PROVIDER == 'libvirt'
            if LIBVIRT_STORAGE_POOL != 'default'
                l.storage_pool_name = "#{LIBVIRT_STORAGE_POOL}"
            end
            (1..DISK_COUNT.to_i).each do |diskID|
                diskPath = "#{BOX_OS}-#{$hostname}-disk-#{diskID}.img"
                l. storage :file,
                    :size => "#{DISK_SIZE_GB}GB",
                    :path => diskPath,
                    :allow_existing => true
            end
        end
    end

    config.vm.define $hostname do |subconfig|
        subconfig.vm.hostname = $hostname

        # Virtualbox
        subconfig.vm.provider :virtualbox do |vb|
            vb.customize ['modifyvm', :id, '--uartmode1', 'disconnected']
            # Network configuration
            vb.customize ['modifyvm', :id, '--natdnshostresolver1', 'on']
        end
        # Libvirt
        subconfig.vm.provider :libvirt do |vb|
            vb.disk_bus = "sata"
            vb.qemu_use_session = false
        end

        subconfig.vm.network :private_network,
            :ip => $vmip

        subconfig.vm.synced_folder "data/#{BOX_OS}-#{$hostname}/", '/data', type: 'rsync',
            create: true, owner: 'root', group: 'root',
            rsync__args: ["--rsync-path='sudo rsync'", '--archive', '--delete', '-z']

        # Try to copy the user install scripts first, so we fail early
        if $userPostInstallScript != ""
            subconfig.vm.provision :file, source: $userPostInstallScript, destination: "/home/vagrant/userPostInstallScript.sh"
        end
        # Add SSH pub key from user if specified
        if $userSSHPubKey != ""
            subconfig.vm.provision :file, source: $userSSHPubKey, destination: "~/.ssh/user.pub"
            subconfig.vm.provision :shell, inline: 'cat /home/vagrant/.ssh/user.pub >> /home/vagrant/.ssh/authorized_keys'
        end
        # Common Provision
        if $osPrepareScript != ""
            subconfig.vm.provision :shell, inline: $osPrepareScript
        end
        subconfig.vm.provision :shell, inline: $prepareScript
        subconfig.vm.provision :shell, inline: $containerRuntimeInstallScript
        subconfig.vm.provision :shell, inline: $containerRuntimeConfigScript
        subconfig.vm.provision :shell, inline: $baseInstallScript
        subconfig.vm.provision :shell, inline: $verifyNodeScript
        # Run diskandreboot plugin to add VirtualBox disks to VMs
        if VAGRANT_DEFAULT_PROVIDER == 'virtualbox'
            subconfig.vm.provision :diskandreboot
        else
            # Due to Docker using (non-unified) cgroups v1, a reboot is needed
            if BOX_OS == 'fedora'
                subconfig.vm.provision :reload
            end
        end
        # Node Provision
        if $hostname.include? "node"
            subconfig.vm.provision :shell, inline: $kubeMinionScript
        end
        # Master Provision
        if $hostname == 'master'
            subconfig.vm.provision :shell, inline: $kubeMasterScript
            if $kubeMasterPostScript != ""
                subconfig.vm.provision :shell, inline: $kubeMasterPostScript
            end
            # Addons
            if K8S_DASHBOARD
                subconfig.vm.provision :shell, inline: $kubeDashScript
                subconfig.vm.network 'forwarded_port', guest: 8443, host: 2443
            end
            if KUBE_WEB_VIEW
                subconfig.vm.provision :shell, inline: $kubeWebViewScript
            end
        end
        if $postInstallScript != ""
            subconfig.vm.provision :shell, inline: $postInstallScript
        end

        if $userPostInstallScript != ""
            subconfig.vm.provision :shell, inline: 'echo "Execute userPostInstallScript"; bash /home/vagrant/userPostInstallScript.sh'
        end
    end
end
